#
# Copyright (c) 2019-2020 P3TERX
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt X86_lede

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      set_kernel:
        description: "KERNEL"
        required: false
        default: "5.4.y"
        type: choice
        options:
          - "5.4.y"
          - "5.10.y"
          - "5.15.y"
          - "6.1.y"
      set_kernel_version:
        description: "输入具体内核版本:"
        required: false
        default: "5.10.x"
      upload_firmware:
        description: "whether to upload firmware."
        required: false
        default: "false"

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: lede.feeds.conf.default
  DIY_P2_SH: diy-part2_x86_lede.sh
  DIY_SH: common.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  SERVERCHAN_SCKEY: true
  USE_CACHEWRTBUILD: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: Set kernel choice and environment variables
      run: |
        # 根据选取的内核定义对应的脚本和配置文件，并统一设置 KERNEL_VERSION 和 UPLOAD_FIRMWARE
        case "${{ github.event.inputs.set_kernel }}" in
          "5.15.y")
            file="diy-part1_x86_lede_5.15.sh"
            feeds="x86_lede_5.15.config"
            ;;
          "5.4.y")
            file="diy-part1_x86_lede_5.4.sh"
            feeds="x86_lede_5.4.config"
            ;;
          "5.10.y")
            file="diy-part1_x86_lede_5.10.sh"
            feeds="x86_lede_5.10.config"
            ;;
          "6.1.y")
            file="diy-part1_x86_lede_6.1.sh"
            feeds="x86_lede_6.1.config"
            ;;
          *)
            echo "Unsupported kernel version. Exiting."
            exit 1
            ;;
        esac
        echo "DIY_P1_SH=${file}" >> "$GITHUB_ENV"
        echo "CONFIG_FILE=${feeds}" >> "$GITHUB_ENV"
        echo "KERNEL_VERSION=${{ github.event.inputs.set_kernel_version }}" >> "$GITHUB_ENV"
        echo "UPLOAD_FIRMWARE=${{ github.event.inputs.upload_firmware }}" >> "$GITHUB_ENV"

    - name: Display system information and send warning (Telegram)
      run: |
        echo "警告⚠: 分配的服务器性能有限，请注意所选插件对 CPU 的占用。"
        echo "--------------------------CPU信息--------------------------"
        echo "物理CPU数量: $(grep -c '^physical id' /proc/cpuinfo)"
        echo "核心数量: $(nproc)"
        echo "CPU型号: $(grep -m1 'name' /proc/cpuinfo | awk -F: '{print $2}')"
        echo "--------------------------内存信息--------------------------"
        sudo lshw -short -C memory | grep GiB || echo "内存信息未能获取"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v '[1-9]' | wc -l)"
        df -hT
        # 简单采集CPU基本信息用于通知
        CPUNAME=$(grep -m1 'name' /proc/cpuinfo | awk -F: '{print $2}' | xargs)
        CPUCORES=$(grep -m1 'cpu cores' /proc/cpuinfo | awk -F: '{print $2}' | xargs)
        if [[ "${SERVERCHAN_SCKEY}" == "true" ]]; then
          curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=🎉 主人：您正在使用 CPU [${CPUNAME}] 核心数 [${CPUCORES}] 线程数 [$(nproc)] 的机器编译 ${{ github.event.inputs.set_kernel_version }} lede..." "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
        fi

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # 清理 docker 和系统缓存
        docker system prune -af || true
        [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
        sudo swapoff -a
        sudo rm -f /swapfile /mnt/swapfile
        sudo apt-get -y update
        sudo apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo apt-get -y install $(curl -fsSL https://is.gd/depend_ubuntu2204_openwrt)
        sudo systemctl daemon-reload
        sudo apt-get -y autoremove --purge
        sudo apt-get clean
        sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
        sudo rm -rf ~/{.cargo,.dotnet,.rustup}
        sudo timedatectl set-timezone "${TZ}"
        echo "UPLOAD_FIRMWARE=${{ github.event.inputs.upload_firmware }}" >> "$GITHUB_ENV"

    - name: Combine Disks for Build Space
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        root-reserve-mb: 512
        remove-dotnet: 'true'

    - name: Checkout repository
      uses: actions/checkout@v4
 
    - name: Clone OpenWrt source code
      run: |
        df -hT "$GITHUB_WORKSPACE"
        git clone "$REPO_URL" -b "$REPO_BRANCH" openwrt  

    - name: Load custom feeds and run DIY phase1
      run: |
        if [ -f "$FEEDS_CONF" ]; then
          mv "$FEEDS_CONF" openwrt/feeds.conf.default
        fi
        chmod +x "$GITHUB_WORKSPACE/$DIY_P1_SH"
        cd openwrt
        "$GITHUB_WORKSPACE/$DIY_P1_SH"

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Load custom configuration and run DIY phase2
      run: |
        if [ -d files ]; then
          mv files openwrt/files
        fi
        if [ -f "$CONFIG_FILE" ]; then
          mv "$CONFIG_FILE" openwrt/.config
        fi
        chmod +x "$GITHUB_WORKSPACE/$DIY_P2_SH"
        cd openwrt
        "$GITHUB_WORKSPACE/$DIY_P2_SH"

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: SSH connection to Actions
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh != 'false') || contains(github.event.action, 'ssh')
      uses: P3TERX/ssh2actions@v1.0.0
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Set file permissions and copy configuration files
      run: |
        cd openwrt
        mkdir -p files/etc/config/
        cp "$GITHUB_WORKSPACE/diy/x86_lede/network" files/etc/config/network -v || echo "network 文件不存在"
        cp "$GITHUB_WORKSPACE/diy/x86_lede/uhttpd" files/etc/config/uhttpd -v || echo "uhttpd 文件不存在"
        chmod -R 755 .

    - name: Download packages
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        # 检查并清理不完整的下载文件
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> "$GITHUB_OUTPUT"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        if [ -s DEVICE_NAME ]; then
          echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> "$GITHUB_ENV"
        fi
        echo "FILE_DATE=_$(date +'%Y%m%d%H%M')" >> "$GITHUB_ENV"

    - name: Check space usage
      if: (!cancelled())
      run: df -hT "$GITHUB_WORKSPACE"

    - name: Upload bin directory as artifact
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize generated firmware files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        ls
        # 清理无关文件
        rm -rf packages config.buildinfo feeds.buildinfo sha256sums version.buildinfo
        # 根据内核类型重命名固件
        case "$DIY_P1_SH" in
          "diy-part1_x86_lede_5.15.sh")
            mv openwrt-x86-64-generic-squashfs-combined-efi.img.gz openwrt-x86-64-${KERNEL_VERSION}-combined-efi.img.gz
            mv openwrt-x86-64-generic-squashfs-combined.img.gz openwrt-x86-64-${KERNEL_VERSION}-combined.img.gz
            mv openwrt-x86-64-generic-rootfs.tar.gz openwrt-x86-64-5.15.Y-generic-rootfs.tar.gz
            ;;
          "diy-part1_x86_lede_5.10.sh")
            mv openwrt-x86-64-generic-squashfs-combined-efi.img.gz openwrt-x86-64-${KERNEL_VERSION}-combined-efi.img.gz
            mv openwrt-x86-64-generic-squashfs-combined.img.gz openwrt-x86-64-${KERNEL_VERSION}-combined.img.gz
            mv openwrt-x86-64-generic-rootfs.tar.gz openwrt-x86-64-5.10.Y-generic-rootfs.tar.gz
            ;;
          "diy-part1_x86_lede_5.4.sh")
            mv openwrt-x86-64-generic-squashfs-combined-efi.img.gz openwrt-x86-64-${KERNEL_VERSION}-combined-efi.img.gz
            mv openwrt-x86-64-generic-squashfs-combined.img.gz openwrt-x86-64-${KERNEL_VERSION}-combined.img.gz
            mv openwrt-x86-64-generic-rootfs.tar.gz openwrt-x86-64-5.4.Y-generic-rootfs.tar.gz
            ;;
          "diy-part1_x86_lede_6.1.sh")
            mv openwrt-x86-64-generic-squashfs-combined-efi.img.gz openwrt-x86-64-${KERNEL_VERSION}-combined-efi.img.gz
            mv openwrt-x86-64-generic-squashfs-combined.img.gz openwrt-x86-64-${KERNEL_VERSION}-combined.img.gz
            mv openwrt-x86-64-generic-rootfs.tar.gz openwrt-x86-64-6.1.Y-generic-rootfs.tar.gz
            ;;
        esac
        echo "FIRMWARE=$PWD" >> "$GITHUB_ENV"
        echo "status=success" >> "$GITHUB_OUTPUT"

    - name: Upload firmware directory as artifact
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: openwrt-x86-64-${{ env.KERNEL_VERSION }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to release
      uses: ncipollo/release-action@v1
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        token: ${{ secrets.REPO_TOKEN }}
        name: Openwrt_X86_without_docker
        tag: openwrt_x86
        commit: main
        allowUpdates: true
        repo: Openwrt_X86-Openwrt_N1-Armbian_N1
        body: |
          ## Openwrt_X86:

          * lede 大雕 openwrt 内核 5.4 5.10, 5.15, 6.1 (5.15 和 6.1 为精简旁路由版)
          * immortalwrt 天灵 openwrt 内核 4.19
          * IP: 192.168.2.3 | ID: root | Password: password
          * adguardhome 已内置 DNS 和广告过滤，下载核心后即可开启
          * adguardhome 初始密码: password
          * rootfs 文件适用于 lxc，例如 PVE 的 CT 模板 ([教程](https://nb0.cc/lxc))
          * x86 固件不带 docker，请使用一键脚本自行安装
          * （一键脚本： bash <(curl -s -S -L nb0.cc/kiss) 或者 curl -Lo kiss.sh nb0.cc/kiss && bash kiss.sh）
        artifacts: ${{ env.FIRMWARE }}/*

    - name: Setup Rclone
      uses: AnimMouse/setup-rclone@v1
      with:
        rclone_config: ${{ secrets.RCLONE_CONFIG }}

    - name: Upload to OneDrive via Rclone
      run: |
        cd openwrt/bin/targets/*/*
        mkdir -p upload && mv *.gz upload/
        rclone -v move upload kiss_blockads:onedrive/OPENWRT/X86_OP

    - name: Notify on failure via Telegram
      if: ${{ failure() }}
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=我亲爱的😭主人😭：您使用 kissyouhunter 仓库编译 ${{ github.event.inputs.set_kernel_version }} lede 固件失败了，请及时处理！😭" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

    - name: Send success notification via Telegram
      run: |
        if [[ "${SERVERCHAN_SCKEY}" == "true" ]]; then
          curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=我亲爱的✨主人✨：您使用 kissyouhunter 仓库编译 ${{ github.event.inputs.set_kernel_version }} lede 固件已成功生成！💐" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
        fi
